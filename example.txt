export class ProjectionEngine {
    register(projection: IProjection) { }
    run() { }
}

export interface IProjection {
    definition(source: IProjectionBuilder): void;
    snapshotStrategy?(): ISnapshotStrategy;
}

interface ISnapshotStrategy { }

export interface IProjectionSplit {
    when(definition: IWhen): void;
}

export function Projection(uri: string) {
    return function (target: Function) { };
}

export interface IProjectionBuilder {
    fromAll(): IProjectionHandling;
}

export interface IProjectionHandling {
    when(definition: IWhen): void;
    splitBy(splitByDefinition: any): IProjectionSplit;
}

export interface IWhen {
    $init?: () => any;
    [name: string]: (s: Object, e: Object) => Object;
}

@Projection("count") // will be /count
export class CountProjection implements IProjection {

    public definition(source: IProjectionBuilder) {
        return source.fromAll()
            .when({
                $init: () => { return 0; },
                $any: (s: any, e: any) => { s++; }
            });
    }
}

@endpoint("/stuff")
export class SimpleProjection implements IProjectionDefinition {

    constructor(@inject("IProjectionBuilder") private projection: IProjectionBuilder) {}
    
    public define(): IProjection {
        return projection
            .fromAll()
            .when({
                FarmRegistered: (s: any, e: any) => {
                    s.id = e.farmId;
                    s.name = e.name;

                    return s;
                },
                FarmOther: this.doStuff
            });
    }
    
    private  doStuff(s: any, e: any): any {
        return null;
    }
}


@Projection("for-each-farm") // will be /for-each-farm/{id}
export class SplitProjection implements IProjection {

    public definition(source: IProjectionBuilder) {
        return source.fromAll()
            .splitBy({
                FarmRegistered: (e: any) => e.farmId,
                $default: (e: any) => e.id
            })
            .when({
                $init: () => null,
                "FarmRegistered": (s: any, e: any) => {
                    s.id = e.farmId;
                    return "";
                },
                "Farm*": (s: number, e: number)
            });
    }
}
